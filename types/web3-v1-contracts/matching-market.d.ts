/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogNote = ContractEventLog<{
  sig: string;
  guy: string;
  foo: string;
  bar: string;
  wad: string;
  fax: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type LogItemUpdate = ContractEventLog<{
  id: string;
  0: string;
}>;
export type LogTrade = ContractEventLog<{
  pay_amt: string;
  pay_gem: string;
  buy_amt: string;
  buy_gem: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LogMake = ContractEventLog<{
  id: string;
  pair: string;
  maker: string;
  pay_gem: string;
  buy_gem: string;
  pay_amt: string;
  buy_amt: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type LogBump = ContractEventLog<{
  id: string;
  pair: string;
  maker: string;
  pay_gem: string;
  buy_gem: string;
  pay_amt: string;
  buy_amt: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type LogTake = ContractEventLog<{
  id: string;
  pair: string;
  maker: string;
  pay_gem: string;
  buy_gem: string;
  taker: string;
  take_amt: string;
  give_amt: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type LogKill = ContractEventLog<{
  id: string;
  pair: string;
  maker: string;
  pay_gem: string;
  buy_gem: string;
  pay_amt: string;
  buy_amt: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type LogSetAuthority = ContractEventLog<{
  authority: string;
  0: string;
}>;
export type LogSetOwner = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type LogBuyEnabled = ContractEventLog<{
  isEnabled: boolean;
  0: boolean;
}>;
export type LogMinSell = ContractEventLog<{
  pay_gem: string;
  min_amount: string;
  0: string;
  1: string;
}>;
export type LogMatchingEnabled = ContractEventLog<{
  isEnabled: boolean;
  0: boolean;
}>;
export type LogUnsortedOffer = ContractEventLog<{
  id: string;
  0: string;
}>;
export type LogSortedOffer = ContractEventLog<{
  id: string;
  0: string;
}>;
export type LogInsert = ContractEventLog<{
  keeper: string;
  id: string;
  0: string;
  1: string;
}>;
export type LogDelete = ContractEventLog<{
  keeper: string;
  id: string;
  0: string;
  1: string;
}>;

export interface MatchingMarket extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MatchingMarket;
  clone(): MatchingMarket;
  methods: {
    matchingEnabled(): NonPayableTransactionObject<boolean>;

    getBestOffer(
      sell_gem: string,
      buy_gem: string
    ): NonPayableTransactionObject<string>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: number | string,
      buy_gem: string,
      min_fill_amount: number | string
    ): NonPayableTransactionObject<string>;

    stop(): NonPayableTransactionObject<void>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: number | string,
      buy_amt: number | string
    ): NonPayableTransactionObject<string>;

    setOwner(owner_: string): NonPayableTransactionObject<void>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: number | string
    ): NonPayableTransactionObject<string>;

    "offer(uint256,address,uint256,address,uint256)"(
      pay_amt: number | string,
      pay_gem: string,
      buy_amt: number | string,
      buy_gem: string,
      pos: number | string
    ): NonPayableTransactionObject<string>;

    "offer(uint256,address,uint256,address,uint256,bool)"(
      pay_amt: number | string,
      pay_gem: string,
      buy_amt: number | string,
      buy_gem: string,
      pos: number | string,
      rounding: boolean
    ): NonPayableTransactionObject<string>;

    "offer(uint256,address,uint256,address)"(
      pay_amt: number | string,
      pay_gem: string,
      buy_amt: number | string,
      buy_gem: string
    ): NonPayableTransactionObject<string>;

    insert(
      id: number | string,
      pos: number | string
    ): NonPayableTransactionObject<boolean>;

    last_offer_id(): NonPayableTransactionObject<string>;

    setMatchingEnabled(
      matchingEnabled_: boolean
    ): NonPayableTransactionObject<boolean>;

    cancel(id: number | string): NonPayableTransactionObject<boolean>;

    getOffer(
      id: number | string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    del_rank(id: number | string): NonPayableTransactionObject<boolean>;

    take(
      id: string | number[],
      maxTakeAmount: number | string
    ): NonPayableTransactionObject<void>;

    getMinSell(pay_gem: string): NonPayableTransactionObject<string>;

    getTime(): NonPayableTransactionObject<string>;

    dustId(): NonPayableTransactionObject<string>;

    getNextUnsortedOffer(
      id: number | string
    ): NonPayableTransactionObject<string>;

    close_time(): NonPayableTransactionObject<string>;

    _span(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    _best(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    stopped(): NonPayableTransactionObject<boolean>;

    bump(id_: string | number[]): NonPayableTransactionObject<void>;

    setAuthority(authority_: string): NonPayableTransactionObject<void>;

    getOfferCount(
      sell_gem: string,
      buy_gem: string
    ): NonPayableTransactionObject<string>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: number | string,
      pay_gem: string,
      max_fill_amount: number | string
    ): NonPayableTransactionObject<string>;

    isActive(id: number | string): NonPayableTransactionObject<boolean>;

    offers(
      arg0: number | string
    ): NonPayableTransactionObject<{
      pay_amt: string;
      pay_gem: string;
      buy_amt: string;
      buy_gem: string;
      owner: string;
      timestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    getFirstUnsortedOffer(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    getBetterOffer(id: number | string): NonPayableTransactionObject<string>;

    _dust(arg0: string): NonPayableTransactionObject<string>;

    getWorseOffer(id: number | string): NonPayableTransactionObject<string>;

    _near(arg0: number | string): NonPayableTransactionObject<string>;

    kill(id: string | number[]): NonPayableTransactionObject<void>;

    setMinSell(
      pay_gem: string,
      dust: number | string
    ): NonPayableTransactionObject<boolean>;

    authority(): NonPayableTransactionObject<string>;

    isClosed(): NonPayableTransactionObject<boolean>;

    _rank(
      arg0: number | string
    ): NonPayableTransactionObject<{
      next: string;
      prev: string;
      delb: string;
      0: string;
      1: string;
      2: string;
    }>;

    getOwner(id: number | string): NonPayableTransactionObject<string>;

    isOfferSorted(id: number | string): NonPayableTransactionObject<boolean>;

    setBuyEnabled(buyEnabled_: boolean): NonPayableTransactionObject<boolean>;

    buy(
      id: number | string,
      amount: number | string
    ): NonPayableTransactionObject<boolean>;

    buyEnabled(): NonPayableTransactionObject<boolean>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: number | string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    LogItemUpdate(cb?: Callback<LogItemUpdate>): EventEmitter;
    LogItemUpdate(
      options?: EventOptions,
      cb?: Callback<LogItemUpdate>
    ): EventEmitter;

    LogTrade(cb?: Callback<LogTrade>): EventEmitter;
    LogTrade(options?: EventOptions, cb?: Callback<LogTrade>): EventEmitter;

    LogMake(cb?: Callback<LogMake>): EventEmitter;
    LogMake(options?: EventOptions, cb?: Callback<LogMake>): EventEmitter;

    LogBump(cb?: Callback<LogBump>): EventEmitter;
    LogBump(options?: EventOptions, cb?: Callback<LogBump>): EventEmitter;

    LogTake(cb?: Callback<LogTake>): EventEmitter;
    LogTake(options?: EventOptions, cb?: Callback<LogTake>): EventEmitter;

    LogKill(cb?: Callback<LogKill>): EventEmitter;
    LogKill(options?: EventOptions, cb?: Callback<LogKill>): EventEmitter;

    LogSetAuthority(cb?: Callback<LogSetAuthority>): EventEmitter;
    LogSetAuthority(
      options?: EventOptions,
      cb?: Callback<LogSetAuthority>
    ): EventEmitter;

    LogSetOwner(cb?: Callback<LogSetOwner>): EventEmitter;
    LogSetOwner(
      options?: EventOptions,
      cb?: Callback<LogSetOwner>
    ): EventEmitter;

    LogBuyEnabled(cb?: Callback<LogBuyEnabled>): EventEmitter;
    LogBuyEnabled(
      options?: EventOptions,
      cb?: Callback<LogBuyEnabled>
    ): EventEmitter;

    LogMinSell(cb?: Callback<LogMinSell>): EventEmitter;
    LogMinSell(options?: EventOptions, cb?: Callback<LogMinSell>): EventEmitter;

    LogMatchingEnabled(cb?: Callback<LogMatchingEnabled>): EventEmitter;
    LogMatchingEnabled(
      options?: EventOptions,
      cb?: Callback<LogMatchingEnabled>
    ): EventEmitter;

    LogUnsortedOffer(cb?: Callback<LogUnsortedOffer>): EventEmitter;
    LogUnsortedOffer(
      options?: EventOptions,
      cb?: Callback<LogUnsortedOffer>
    ): EventEmitter;

    LogSortedOffer(cb?: Callback<LogSortedOffer>): EventEmitter;
    LogSortedOffer(
      options?: EventOptions,
      cb?: Callback<LogSortedOffer>
    ): EventEmitter;

    LogInsert(cb?: Callback<LogInsert>): EventEmitter;
    LogInsert(options?: EventOptions, cb?: Callback<LogInsert>): EventEmitter;

    LogDelete(cb?: Callback<LogDelete>): EventEmitter;
    LogDelete(options?: EventOptions, cb?: Callback<LogDelete>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogItemUpdate", cb: Callback<LogItemUpdate>): void;
  once(
    event: "LogItemUpdate",
    options: EventOptions,
    cb: Callback<LogItemUpdate>
  ): void;

  once(event: "LogTrade", cb: Callback<LogTrade>): void;
  once(event: "LogTrade", options: EventOptions, cb: Callback<LogTrade>): void;

  once(event: "LogMake", cb: Callback<LogMake>): void;
  once(event: "LogMake", options: EventOptions, cb: Callback<LogMake>): void;

  once(event: "LogBump", cb: Callback<LogBump>): void;
  once(event: "LogBump", options: EventOptions, cb: Callback<LogBump>): void;

  once(event: "LogTake", cb: Callback<LogTake>): void;
  once(event: "LogTake", options: EventOptions, cb: Callback<LogTake>): void;

  once(event: "LogKill", cb: Callback<LogKill>): void;
  once(event: "LogKill", options: EventOptions, cb: Callback<LogKill>): void;

  once(event: "LogSetAuthority", cb: Callback<LogSetAuthority>): void;
  once(
    event: "LogSetAuthority",
    options: EventOptions,
    cb: Callback<LogSetAuthority>
  ): void;

  once(event: "LogSetOwner", cb: Callback<LogSetOwner>): void;
  once(
    event: "LogSetOwner",
    options: EventOptions,
    cb: Callback<LogSetOwner>
  ): void;

  once(event: "LogBuyEnabled", cb: Callback<LogBuyEnabled>): void;
  once(
    event: "LogBuyEnabled",
    options: EventOptions,
    cb: Callback<LogBuyEnabled>
  ): void;

  once(event: "LogMinSell", cb: Callback<LogMinSell>): void;
  once(
    event: "LogMinSell",
    options: EventOptions,
    cb: Callback<LogMinSell>
  ): void;

  once(event: "LogMatchingEnabled", cb: Callback<LogMatchingEnabled>): void;
  once(
    event: "LogMatchingEnabled",
    options: EventOptions,
    cb: Callback<LogMatchingEnabled>
  ): void;

  once(event: "LogUnsortedOffer", cb: Callback<LogUnsortedOffer>): void;
  once(
    event: "LogUnsortedOffer",
    options: EventOptions,
    cb: Callback<LogUnsortedOffer>
  ): void;

  once(event: "LogSortedOffer", cb: Callback<LogSortedOffer>): void;
  once(
    event: "LogSortedOffer",
    options: EventOptions,
    cb: Callback<LogSortedOffer>
  ): void;

  once(event: "LogInsert", cb: Callback<LogInsert>): void;
  once(
    event: "LogInsert",
    options: EventOptions,
    cb: Callback<LogInsert>
  ): void;

  once(event: "LogDelete", cb: Callback<LogDelete>): void;
  once(
    event: "LogDelete",
    options: EventOptions,
    cb: Callback<LogDelete>
  ): void;
}
