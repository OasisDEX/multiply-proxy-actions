/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface OtcSupportMethods extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OtcSupportMethods;
  clone(): OtcSupportMethods;
  methods: {
    "getOffers(address,address,address)"(
      otc: string,
      payToken: string,
      buyToken: string
    ): NonPayableTransactionObject<{
      ids: string[];
      payAmts: string[];
      buyAmts: string[];
      owners: string[];
      timestamps: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
    }>;

    "getOffers(address,uint256)"(
      otc: string,
      offerId: number | string
    ): NonPayableTransactionObject<{
      ids: string[];
      payAmts: string[];
      buyAmts: string[];
      owners: string[];
      timestamps: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
    }>;

    getOffersAmountToBuyAll(
      otc: string,
      buyToken: string,
      buyAmt: number | string,
      payToken: string
    ): NonPayableTransactionObject<{
      ordersToTake: string;
      takesPartialOrder: boolean;
      0: string;
      1: boolean;
    }>;

    getOffersAmountToSellAll(
      otc: string,
      payToken: string,
      payAmt: number | string,
      buyToken: string
    ): NonPayableTransactionObject<{
      ordersToTake: string;
      takesPartialOrder: boolean;
      0: string;
      1: boolean;
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
