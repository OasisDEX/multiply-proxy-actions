/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogNote = ContractEventLog<{
  sig: string;
  usr: string;
  arg1: string;
  arg2: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface McdEnd extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): McdEnd;
  clone(): McdEnd;
  methods: {
    Art(arg0: string | number[]): NonPayableTransactionObject<string>;

    bag(arg0: string): NonPayableTransactionObject<string>;

    "cage()"(): NonPayableTransactionObject<void>;

    "cage(bytes32)"(ilk: string | number[]): NonPayableTransactionObject<void>;

    cash(
      ilk: string | number[],
      wad: number | string
    ): NonPayableTransactionObject<void>;

    cat(): NonPayableTransactionObject<string>;

    debt(): NonPayableTransactionObject<string>;

    deny(guy: string): NonPayableTransactionObject<void>;

    "file(bytes32,uint256)"(
      what: string | number[],
      data: number | string
    ): NonPayableTransactionObject<void>;

    "file(bytes32,address)"(
      what: string | number[],
      data: string
    ): NonPayableTransactionObject<void>;

    fix(arg0: string | number[]): NonPayableTransactionObject<string>;

    flow(ilk: string | number[]): NonPayableTransactionObject<void>;

    free(ilk: string | number[]): NonPayableTransactionObject<void>;

    gap(arg0: string | number[]): NonPayableTransactionObject<string>;

    live(): NonPayableTransactionObject<string>;

    out(
      arg0: string | number[],
      arg1: string
    ): NonPayableTransactionObject<string>;

    pack(wad: number | string): NonPayableTransactionObject<void>;

    pot(): NonPayableTransactionObject<string>;

    rely(guy: string): NonPayableTransactionObject<void>;

    skim(
      ilk: string | number[],
      urn: string
    ): NonPayableTransactionObject<void>;

    skip(
      ilk: string | number[],
      id: number | string
    ): NonPayableTransactionObject<void>;

    spot(): NonPayableTransactionObject<string>;

    tag(arg0: string | number[]): NonPayableTransactionObject<string>;

    thaw(): NonPayableTransactionObject<void>;

    vat(): NonPayableTransactionObject<string>;

    vow(): NonPayableTransactionObject<string>;

    wait(): NonPayableTransactionObject<string>;

    wards(arg0: string): NonPayableTransactionObject<string>;

    when(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
