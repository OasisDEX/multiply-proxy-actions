/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogNote = ContractEventLog<{
  sig: string;
  usr: string;
  arg1: string;
  arg2: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type LogValue = ContractEventLog<{
  val: string;
  0: string;
}>;

export interface McdOsm extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): McdOsm;
  clone(): McdOsm;
  methods: {
    bud(arg0: string): NonPayableTransactionObject<string>;

    change(src_: string): NonPayableTransactionObject<void>;

    deny(usr: string): NonPayableTransactionObject<void>;

    "diss(address[])"(a: string[]): NonPayableTransactionObject<void>;

    "diss(address)"(a: string): NonPayableTransactionObject<void>;

    hop(): NonPayableTransactionObject<string>;

    "kiss(address[])"(a: string[]): NonPayableTransactionObject<void>;

    "kiss(address)"(a: string): NonPayableTransactionObject<void>;

    pass(): NonPayableTransactionObject<boolean>;

    peek(): NonPayableTransactionObject<{
      0: string;
      1: boolean;
    }>;

    peep(): NonPayableTransactionObject<{
      0: string;
      1: boolean;
    }>;

    poke(): NonPayableTransactionObject<void>;

    read(): NonPayableTransactionObject<string>;

    rely(usr: string): NonPayableTransactionObject<void>;

    src(): NonPayableTransactionObject<string>;

    start(): NonPayableTransactionObject<void>;

    step(ts: number | string): NonPayableTransactionObject<void>;

    stop(): NonPayableTransactionObject<void>;

    stopped(): NonPayableTransactionObject<string>;

    void(): NonPayableTransactionObject<void>;

    wards(arg0: string): NonPayableTransactionObject<string>;

    zzz(): NonPayableTransactionObject<string>;
  };
  events: {
    LogValue(cb?: Callback<LogValue>): EventEmitter;
    LogValue(options?: EventOptions, cb?: Callback<LogValue>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogValue", cb: Callback<LogValue>): void;
  once(event: "LogValue", options: EventOptions, cb: Callback<LogValue>): void;
}
