/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Kick = ContractEventLog<{
  id: string;
  lot: string;
  bid: string;
  tab: string;
  usr: string;
  gal: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type LogNote = ContractEventLog<{
  sig: string;
  usr: string;
  arg1: string;
  arg2: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface McdFlip extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): McdFlip;
  clone(): McdFlip;
  methods: {
    beg(): NonPayableTransactionObject<string>;

    bids(
      arg0: number | string
    ): NonPayableTransactionObject<{
      bid: string;
      lot: string;
      guy: string;
      tic: string;
      end: string;
      usr: string;
      gal: string;
      tab: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    cat(): NonPayableTransactionObject<string>;

    deal(id: number | string): NonPayableTransactionObject<void>;

    dent(
      id: number | string,
      lot: number | string,
      bid: number | string
    ): NonPayableTransactionObject<void>;

    deny(usr: string): NonPayableTransactionObject<void>;

    "file(bytes32,uint256)"(
      what: string | number[],
      data: number | string
    ): NonPayableTransactionObject<void>;

    "file(bytes32,address)"(
      what: string | number[],
      data: string
    ): NonPayableTransactionObject<void>;

    ilk(): NonPayableTransactionObject<string>;

    kick(
      usr: string,
      gal: string,
      tab: number | string,
      lot: number | string,
      bid: number | string
    ): NonPayableTransactionObject<string>;

    kicks(): NonPayableTransactionObject<string>;

    rely(usr: string): NonPayableTransactionObject<void>;

    tau(): NonPayableTransactionObject<string>;

    tend(
      id: number | string,
      lot: number | string,
      bid: number | string
    ): NonPayableTransactionObject<void>;

    tick(id: number | string): NonPayableTransactionObject<void>;

    ttl(): NonPayableTransactionObject<string>;

    vat(): NonPayableTransactionObject<string>;

    wards(arg0: string): NonPayableTransactionObject<string>;

    yank(id: number | string): NonPayableTransactionObject<void>;
  };
  events: {
    Kick(cb?: Callback<Kick>): EventEmitter;
    Kick(options?: EventOptions, cb?: Callback<Kick>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Kick", cb: Callback<Kick>): void;
  once(event: "Kick", options: EventOptions, cb: Callback<Kick>): void;
}
