/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogNote = ContractEventLog<{
  sig: string;
  arg1: string;
  arg2: string;
  arg3: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface Vat extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Vat;
  clone(): Vat;
  methods: {
    Line(): NonPayableTransactionObject<string>;

    cage(): NonPayableTransactionObject<void>;

    can(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    dai(arg0: string): NonPayableTransactionObject<string>;

    debt(): NonPayableTransactionObject<string>;

    deny(usr: string): NonPayableTransactionObject<void>;

    "file(bytes32,bytes32,uint256)"(
      ilk: string | number[],
      what: string | number[],
      data: number | string
    ): NonPayableTransactionObject<void>;

    "file(bytes32,uint256)"(
      what: string | number[],
      data: number | string
    ): NonPayableTransactionObject<void>;

    flux(
      ilk: string | number[],
      src: string,
      dst: string,
      wad: number | string
    ): NonPayableTransactionObject<void>;

    fold(
      i: string | number[],
      u: string,
      rate: number | string
    ): NonPayableTransactionObject<void>;

    fork(
      ilk: string | number[],
      src: string,
      dst: string,
      dink: number | string,
      dart: number | string
    ): NonPayableTransactionObject<void>;

    frob(
      i: string | number[],
      u: string,
      v: string,
      w: string,
      dink: number | string,
      dart: number | string
    ): NonPayableTransactionObject<void>;

    gem(
      arg0: string | number[],
      arg1: string
    ): NonPayableTransactionObject<string>;

    grab(
      i: string | number[],
      u: string,
      v: string,
      w: string,
      dink: number | string,
      dart: number | string
    ): NonPayableTransactionObject<void>;

    heal(rad: number | string): NonPayableTransactionObject<void>;

    hope(usr: string): NonPayableTransactionObject<void>;

    ilks(
      arg0: string | number[]
    ): NonPayableTransactionObject<{
      Art: string;
      rate: string;
      spot: string;
      line: string;
      dust: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    init(ilk: string | number[]): NonPayableTransactionObject<void>;

    live(): NonPayableTransactionObject<string>;

    move(
      src: string,
      dst: string,
      rad: number | string
    ): NonPayableTransactionObject<void>;

    nope(usr: string): NonPayableTransactionObject<void>;

    rely(usr: string): NonPayableTransactionObject<void>;

    sin(arg0: string): NonPayableTransactionObject<string>;

    slip(
      ilk: string | number[],
      usr: string,
      wad: number | string
    ): NonPayableTransactionObject<void>;

    suck(
      u: string,
      v: string,
      rad: number | string
    ): NonPayableTransactionObject<void>;

    urns(
      arg0: string | number[],
      arg1: string
    ): NonPayableTransactionObject<{
      ink: string;
      art: string;
      0: string;
      1: string;
    }>;

    vice(): NonPayableTransactionObject<string>;

    wards(arg0: string): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
