/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface McdCatInterface extends ethers.utils.Interface {
  functions: {
    "bite(bytes32,address)": FunctionFragment;
    "box()": FunctionFragment;
    "cage()": FunctionFragment;
    "claw(uint256)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "file(bytes32,bytes32,uint256)": FunctionFragment;
    "ilks(bytes32)": FunctionFragment;
    "litter()": FunctionFragment;
    "live()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bite",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "box", values?: undefined): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "claw", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "litter", values?: undefined): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "bite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "box", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "litter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Bite(bytes32,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "LogNote(bytes4,address,bytes32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bite"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export class McdCat extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: McdCatInterface;

  functions: {
    bite(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bite(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    box(overrides?: CallOverrides): Promise<[BigNumber]>;

    "box()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claw(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claw(uint256)"(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      flip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        flip: string;
        chop: BigNumber;
        dunk: BigNumber;
      }
    >;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        flip: string;
        chop: BigNumber;
        dunk: BigNumber;
      }
    >;

    litter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "litter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    "live()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    "vow()"(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bite(
    ilk: BytesLike,
    urn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bite(bytes32,address)"(
    ilk: BytesLike,
    urn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  box(overrides?: CallOverrides): Promise<BigNumber>;

  "box()"(overrides?: CallOverrides): Promise<BigNumber>;

  cage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cage()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claw(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claw(uint256)"(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deny(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,bytes32,uint256)"(
    ilk: BytesLike,
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,bytes32,address)"(
    ilk: BytesLike,
    what: BytesLike,
    flip: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilks(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      flip: string;
      chop: BigNumber;
      dunk: BigNumber;
    }
  >;

  "ilks(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      flip: string;
      chop: BigNumber;
      dunk: BigNumber;
    }
  >;

  litter(overrides?: CallOverrides): Promise<BigNumber>;

  "litter()"(overrides?: CallOverrides): Promise<BigNumber>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  "live()"(overrides?: CallOverrides): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rely(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  "vow()"(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bite(
      ilk: BytesLike,
      urn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bite(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    box(overrides?: CallOverrides): Promise<BigNumber>;

    "box()"(overrides?: CallOverrides): Promise<BigNumber>;

    cage(overrides?: CallOverrides): Promise<void>;

    "cage()"(overrides?: CallOverrides): Promise<void>;

    claw(rad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claw(uint256)"(
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      flip: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        flip: string;
        chop: BigNumber;
        dunk: BigNumber;
      }
    >;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        flip: string;
        chop: BigNumber;
        dunk: BigNumber;
      }
    >;

    litter(overrides?: CallOverrides): Promise<BigNumber>;

    "litter()"(overrides?: CallOverrides): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    "vow()"(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Bite(
      ilk: BytesLike | null,
      urn: string | null,
      ink: null,
      art: null,
      tab: null,
      flip: null,
      id: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        ilk: string;
        urn: string;
        ink: BigNumber;
        art: BigNumber;
        tab: BigNumber;
        flip: string;
        id: BigNumber;
      }
    >;

    LogNote(
      sig: BytesLike | null,
      usr: string | null,
      arg1: BytesLike | null,
      arg2: BytesLike | null,
      data: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { sig: string; usr: string; arg1: string; arg2: string; data: string }
    >;
  };

  estimateGas: {
    bite(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bite(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    box(overrides?: CallOverrides): Promise<BigNumber>;

    "box()"(overrides?: CallOverrides): Promise<BigNumber>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claw(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claw(uint256)"(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      flip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilks(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    litter(overrides?: CallOverrides): Promise<BigNumber>;

    "litter()"(overrides?: CallOverrides): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    "vow()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bite(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bite(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    box(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "box()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claw(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claw(uint256)"(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      flip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    litter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "litter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "live()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
