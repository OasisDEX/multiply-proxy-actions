/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MatchingMarketInterface extends ethers.utils.Interface {
  functions: {
    "matchingEnabled()": FunctionFragment;
    "getBestOffer(address,address)": FunctionFragment;
    "sellAllAmount(address,uint256,address,uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "make(address,address,uint128,uint128)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "getBuyAmount(address,address,uint256)": FunctionFragment;
    "offer(uint256,address,uint256,address,uint256)": FunctionFragment;
    "insert(uint256,uint256)": FunctionFragment;
    "last_offer_id()": FunctionFragment;
    "setMatchingEnabled(bool)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "del_rank(uint256)": FunctionFragment;
    "take(bytes32,uint128)": FunctionFragment;
    "getMinSell(address)": FunctionFragment;
    "getTime()": FunctionFragment;
    "dustId()": FunctionFragment;
    "getNextUnsortedOffer(uint256)": FunctionFragment;
    "close_time()": FunctionFragment;
    "_span(address,address)": FunctionFragment;
    "_best(address,address)": FunctionFragment;
    "stopped()": FunctionFragment;
    "bump(bytes32)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "getOfferCount(address,address)": FunctionFragment;
    "buyAllAmount(address,uint256,address,uint256)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "getFirstUnsortedOffer()": FunctionFragment;
    "owner()": FunctionFragment;
    "getBetterOffer(uint256)": FunctionFragment;
    "_dust(address)": FunctionFragment;
    "getWorseOffer(uint256)": FunctionFragment;
    "_near(uint256)": FunctionFragment;
    "kill(bytes32)": FunctionFragment;
    "setMinSell(address,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "isClosed()": FunctionFragment;
    "_rank(uint256)": FunctionFragment;
    "getOwner(uint256)": FunctionFragment;
    "isOfferSorted(uint256)": FunctionFragment;
    "setBuyEnabled(bool)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "buyEnabled()": FunctionFragment;
    "getPayAmount(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "matchingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBestOffer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellAllAmount",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "make",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBuyAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offer",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "last_offer_id",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "del_rank",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMinSell", values: [string]): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "dustId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNextUnsortedOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "close_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_span",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_best",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "bump", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferCount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAllAmount",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnsortedOffer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBetterOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_dust", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWorseOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_near", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "kill", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setMinSell",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "isClosed", values?: undefined): string;
  encodeFunctionData(functionFragment: "_rank", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfferSorted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayAmount",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellAllAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "make", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last_offer_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "del_rank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dustId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextUnsortedOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close_time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_span", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_best", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bump", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAllAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnsortedOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetterOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_dust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorseOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_near", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_rank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOfferSorted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayAmount",
    data: BytesLike
  ): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
    "LogItemUpdate(uint256)": EventFragment;
    "LogTrade(uint256,address,uint256,address)": EventFragment;
    "LogMake(bytes32,bytes32,address,address,address,uint128,uint128,uint64)": EventFragment;
    "LogBump(bytes32,bytes32,address,address,address,uint128,uint128,uint64)": EventFragment;
    "LogTake(bytes32,bytes32,address,address,address,address,uint128,uint128,uint64)": EventFragment;
    "LogKill(bytes32,bytes32,address,address,address,uint128,uint128,uint64)": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "LogBuyEnabled(bool)": EventFragment;
    "LogMinSell(address,uint256)": EventFragment;
    "LogMatchingEnabled(bool)": EventFragment;
    "LogUnsortedOffer(uint256)": EventFragment;
    "LogSortedOffer(uint256)": EventFragment;
    "LogInsert(address,uint256)": EventFragment;
    "LogDelete(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogItemUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBump"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogKill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBuyEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMinSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMatchingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnsortedOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSortedOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogInsert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDelete"): EventFragment;
}

export class MatchingMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MatchingMarketInterface;

  functions: {
    matchingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "matchingEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    getBestOffer(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBestOffer(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellAllAmount(address,uint256,address,uint256)"(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "make(address,address,uint128,uint128)"(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fill_amt: BigNumber }>;

    "getBuyAmount(address,address,uint256)"(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fill_amt: BigNumber }>;

    "offer(uint256,address,uint256,address,uint256)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "offer(uint256,address,uint256,address,uint256,bool)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "offer(uint256,address,uint256,address)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insert(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "insert(uint256,uint256)"(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    last_offer_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    "last_offer_id()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMatchingEnabled(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMatchingEnabled(bool)"(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    del_rank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "del_rank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    take(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "take(bytes32,uint128)"(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinSell(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinSell(address)"(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dustId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dustId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextUnsortedOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNextUnsortedOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    close_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    "close_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _span(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _best(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    bump(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bump(bytes32)"(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOfferCount(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOfferCount(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyAllAmount(address,uint256,address,uint256)"(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        pay_amt: BigNumber;
        pay_gem: string;
        buy_amt: BigNumber;
        buy_gem: string;
        owner: string;
        timestamp: BigNumber;
      }
    >;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        pay_amt: BigNumber;
        pay_gem: string;
        buy_amt: BigNumber;
        buy_gem: string;
        owner: string;
        timestamp: BigNumber;
      }
    >;

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFirstUnsortedOffer()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _dust(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "_dust(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "_near(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kill(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "kill(bytes32)"(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinSell(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinSell(address,uint256)"(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    "authority()"(overrides?: CallOverrides): Promise<[string]>;

    isClosed(
      overrides?: CallOverrides
    ): Promise<[boolean] & { closed: boolean }>;

    "isClosed()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { closed: boolean }>;

    _rank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        next: BigNumber;
        prev: BigNumber;
        delb: BigNumber;
      }
    >;

    "_rank(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        next: BigNumber;
        prev: BigNumber;
        delb: BigNumber;
      }
    >;

    getOwner(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    isOfferSorted(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOfferSorted(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setBuyEnabled(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBuyEnabled(bool)"(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buy(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "buyEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fill_amt: BigNumber }>;

    "getPayAmount(address,address,uint256)"(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fill_amt: BigNumber }>;
  };

  matchingEnabled(overrides?: CallOverrides): Promise<boolean>;

  "matchingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  getBestOffer(
    sell_gem: string,
    buy_gem: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBestOffer(address,address)"(
    sell_gem: string,
    buy_gem: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellAllAmount(
    pay_gem: string,
    pay_amt: BigNumberish,
    buy_gem: string,
    min_fill_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellAllAmount(address,uint256,address,uint256)"(
    pay_gem: string,
    pay_amt: BigNumberish,
    buy_gem: string,
    min_fill_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  make(
    pay_gem: string,
    buy_gem: string,
    pay_amt: BigNumberish,
    buy_amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "make(address,address,uint128,uint128)"(
    pay_gem: string,
    buy_gem: string,
    pay_amt: BigNumberish,
    buy_amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyAmount(
    buy_gem: string,
    pay_gem: string,
    pay_amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBuyAmount(address,address,uint256)"(
    buy_gem: string,
    pay_gem: string,
    pay_amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "offer(uint256,address,uint256,address,uint256)"(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    pos: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "offer(uint256,address,uint256,address,uint256,bool)"(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    pos: BigNumberish,
    rounding: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "offer(uint256,address,uint256,address)"(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insert(
    id: BigNumberish,
    pos: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "insert(uint256,uint256)"(
    id: BigNumberish,
    pos: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  last_offer_id(overrides?: CallOverrides): Promise<BigNumber>;

  "last_offer_id()"(overrides?: CallOverrides): Promise<BigNumber>;

  setMatchingEnabled(
    matchingEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMatchingEnabled(bool)"(
    matchingEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOffer(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber, string]>;

  "getOffer(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber, string]>;

  del_rank(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "del_rank(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  take(
    id: BytesLike,
    maxTakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "take(bytes32,uint128)"(
    id: BytesLike,
    maxTakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getMinSell(address)"(
    pay_gem: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  dustId(overrides?: CallOverrides): Promise<BigNumber>;

  "dustId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNextUnsortedOffer(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNextUnsortedOffer(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  close_time(overrides?: CallOverrides): Promise<BigNumber>;

  "close_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  _span(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_span(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _best(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_best(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  bump(
    id_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bump(bytes32)"(
    id_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOfferCount(
    sell_gem: string,
    buy_gem: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOfferCount(address,address)"(
    sell_gem: string,
    buy_gem: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyAllAmount(
    buy_gem: string,
    buy_amt: BigNumberish,
    pay_gem: string,
    max_fill_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyAllAmount(address,uint256,address,uint256)"(
    buy_gem: string,
    buy_amt: BigNumberish,
    pay_gem: string,
    max_fill_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  offers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      pay_amt: BigNumber;
      pay_gem: string;
      buy_amt: BigNumber;
      buy_gem: string;
      owner: string;
      timestamp: BigNumber;
    }
  >;

  "offers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, BigNumber] & {
      pay_amt: BigNumber;
      pay_gem: string;
      buy_amt: BigNumber;
      buy_gem: string;
      owner: string;
      timestamp: BigNumber;
    }
  >;

  getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>;

  "getFirstUnsortedOffer()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  getBetterOffer(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBetterOffer(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "_dust(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getWorseOffer(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWorseOffer(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_near(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kill(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "kill(bytes32)"(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinSell(
    pay_gem: string,
    dust: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinSell(address,uint256)"(
    pay_gem: string,
    dust: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  "authority()"(overrides?: CallOverrides): Promise<string>;

  isClosed(overrides?: CallOverrides): Promise<boolean>;

  "isClosed()"(overrides?: CallOverrides): Promise<boolean>;

  _rank(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      next: BigNumber;
      prev: BigNumber;
      delb: BigNumber;
    }
  >;

  "_rank(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      next: BigNumber;
      prev: BigNumber;
      delb: BigNumber;
    }
  >;

  getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getOwner(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isOfferSorted(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isOfferSorted(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setBuyEnabled(
    buyEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBuyEnabled(bool)"(
    buyEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buy(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(uint256,uint256)"(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyEnabled(overrides?: CallOverrides): Promise<boolean>;

  "buyEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  getPayAmount(
    pay_gem: string,
    buy_gem: string,
    buy_amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPayAmount(address,address,uint256)"(
    pay_gem: string,
    buy_gem: string,
    buy_amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    matchingEnabled(overrides?: CallOverrides): Promise<boolean>;

    "matchingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    getBestOffer(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestOffer(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellAllAmount(address,uint256,address,uint256)"(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "make(address,address,uint128,uint128)"(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBuyAmount(address,address,uint256)"(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address,uint256)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address,uint256,bool)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "insert(uint256,uint256)"(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    last_offer_id(overrides?: CallOverrides): Promise<BigNumber>;

    "last_offer_id()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMatchingEnabled(
      matchingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setMatchingEnabled(bool)"(
      matchingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancel(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    del_rank(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "del_rank(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    take(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "take(bytes32,uint128)"(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getMinSell(address)"(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    dustId(overrides?: CallOverrides): Promise<BigNumber>;

    "dustId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextUnsortedOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextUnsortedOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close_time(overrides?: CallOverrides): Promise<BigNumber>;

    "close_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    _span(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _best(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    bump(id_: BytesLike, overrides?: CallOverrides): Promise<void>;

    "bump(bytes32)"(id_: BytesLike, overrides?: CallOverrides): Promise<void>;

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOfferCount(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOfferCount(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyAllAmount(address,uint256,address,uint256)"(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        pay_amt: BigNumber;
        pay_gem: string;
        buy_amt: BigNumber;
        buy_gem: string;
        owner: string;
        timestamp: BigNumber;
      }
    >;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, BigNumber] & {
        pay_amt: BigNumber;
        pay_gem: string;
        buy_amt: BigNumber;
        buy_gem: string;
        owner: string;
        timestamp: BigNumber;
      }
    >;

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>;

    "getFirstUnsortedOffer()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_dust(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_near(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    "kill(bytes32)"(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    setMinSell(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setMinSell(address,uint256)"(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    "authority()"(overrides?: CallOverrides): Promise<string>;

    isClosed(overrides?: CallOverrides): Promise<boolean>;

    "isClosed()"(overrides?: CallOverrides): Promise<boolean>;

    _rank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        next: BigNumber;
        prev: BigNumber;
        delb: BigNumber;
      }
    >;

    "_rank(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        next: BigNumber;
        prev: BigNumber;
        delb: BigNumber;
      }
    >;

    getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isOfferSorted(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOfferSorted(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBuyEnabled(
      buyEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setBuyEnabled(bool)"(
      buyEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buy(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buy(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyEnabled(overrides?: CallOverrides): Promise<boolean>;

    "buyEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayAmount(address,address,uint256)"(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    LogNote(
      sig: BytesLike | null,
      guy: string | null,
      foo: BytesLike | null,
      bar: BytesLike | null,
      wad: null,
      fax: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    LogItemUpdate(id: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    LogTrade(
      pay_amt: null,
      pay_gem: string | null,
      buy_amt: null,
      buy_gem: string | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      {
        pay_amt: BigNumber;
        pay_gem: string;
        buy_amt: BigNumber;
        buy_gem: string;
      }
    >;

    LogMake(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
      {
        id: string;
        pair: string;
        maker: string;
        pay_gem: string;
        buy_gem: string;
        pay_amt: BigNumber;
        buy_amt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    LogBump(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
      {
        id: string;
        pair: string;
        maker: string;
        pay_gem: string;
        buy_gem: string;
        pay_amt: BigNumber;
        buy_amt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    LogTake(
      id: null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      taker: string | null,
      take_amt: null,
      give_amt: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        id: string;
        pair: string;
        maker: string;
        pay_gem: string;
        buy_gem: string;
        taker: string;
        take_amt: BigNumber;
        give_amt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    LogKill(
      id: BytesLike | null,
      pair: BytesLike | null,
      maker: string | null,
      pay_gem: null,
      buy_gem: null,
      pay_amt: null,
      buy_amt: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
      {
        id: string;
        pair: string;
        maker: string;
        pay_gem: string;
        buy_gem: string;
        pay_amt: BigNumber;
        buy_amt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    LogSetAuthority(
      authority: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    LogSetOwner(
      owner: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    LogBuyEnabled(
      isEnabled: null
    ): TypedEventFilter<[boolean], { isEnabled: boolean }>;

    LogMinSell(
      pay_gem: null,
      min_amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pay_gem: string; min_amount: BigNumber }
    >;

    LogMatchingEnabled(
      isEnabled: null
    ): TypedEventFilter<[boolean], { isEnabled: boolean }>;

    LogUnsortedOffer(
      id: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    LogSortedOffer(id: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    LogInsert(
      keeper: null,
      id: null
    ): TypedEventFilter<[string, BigNumber], { keeper: string; id: BigNumber }>;

    LogDelete(
      keeper: null,
      id: null
    ): TypedEventFilter<[string, BigNumber], { keeper: string; id: BigNumber }>;
  };

  estimateGas: {
    matchingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "matchingEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBestOffer(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestOffer(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellAllAmount(address,uint256,address,uint256)"(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "make(address,address,uint128,uint128)"(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBuyAmount(address,address,uint256)"(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address,uint256)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address,uint256,bool)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insert(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "insert(uint256,uint256)"(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    last_offer_id(overrides?: CallOverrides): Promise<BigNumber>;

    "last_offer_id()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMatchingEnabled(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMatchingEnabled(bool)"(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOffer(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    del_rank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "del_rank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    take(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "take(bytes32,uint128)"(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinSell(pay_gem: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getMinSell(address)"(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    dustId(overrides?: CallOverrides): Promise<BigNumber>;

    "dustId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextUnsortedOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextUnsortedOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close_time(overrides?: CallOverrides): Promise<BigNumber>;

    "close_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    _span(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _best(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    bump(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bump(bytes32)"(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOfferCount(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOfferCount(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyAllAmount(address,uint256,address,uint256)"(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstUnsortedOffer(overrides?: CallOverrides): Promise<BigNumber>;

    "getFirstUnsortedOffer()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _dust(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_dust(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _near(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_near(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "kill(bytes32)"(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinSell(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinSell(address,uint256)"(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    "authority()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<BigNumber>;

    "isClosed()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rank(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_rank(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfferSorted(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOfferSorted(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBuyEnabled(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBuyEnabled(bool)"(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buy(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "buyEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayAmount(address,address,uint256)"(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "matchingEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestOffer(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestOffer(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellAllAmount(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellAllAmount(address,uint256,address,uint256)"(
      pay_gem: string,
      pay_amt: BigNumberish,
      buy_gem: string,
      min_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    make(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "make(address,address,uint128,uint128)"(
      pay_gem: string,
      buy_gem: string,
      pay_amt: BigNumberish,
      buy_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyAmount(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBuyAmount(address,address,uint256)"(
      buy_gem: string,
      pay_gem: string,
      pay_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offer(uint256,address,uint256,address,uint256)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "offer(uint256,address,uint256,address,uint256,bool)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      pos: BigNumberish,
      rounding: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "offer(uint256,address,uint256,address)"(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insert(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "insert(uint256,uint256)"(
      id: BigNumberish,
      pos: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    last_offer_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "last_offer_id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMatchingEnabled(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMatchingEnabled(bool)"(
      matchingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    del_rank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "del_rank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    take(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "take(bytes32,uint128)"(
      id: BytesLike,
      maxTakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinSell(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinSell(address)"(
      pay_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dustId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dustId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextUnsortedOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextUnsortedOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "close_time()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _span(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _best(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bump(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bump(bytes32)"(
      id_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOfferCount(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOfferCount(address,address)"(
      sell_gem: string,
      buy_gem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAllAmount(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyAllAmount(address,uint256,address,uint256)"(
      buy_gem: string,
      buy_amt: BigNumberish,
      pay_gem: string,
      max_fill_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstUnsortedOffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFirstUnsortedOffer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _dust(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_dust(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _near(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_near(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "kill(bytes32)"(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinSell(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinSell(address,uint256)"(
      pay_gem: string,
      dust: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isClosed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_rank(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfferSorted(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOfferSorted(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBuyEnabled(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBuyEnabled(bool)"(
      buyEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyEnabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayAmount(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayAmount(address,address,uint256)"(
      pay_gem: string,
      buy_gem: string,
      buy_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
