/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface McdOsmInterface extends ethers.utils.Interface {
  functions: {
    "bud(address)": FunctionFragment;
    "change(address)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "diss(address[])": FunctionFragment;
    "hop()": FunctionFragment;
    "kiss(address[])": FunctionFragment;
    "pass()": FunctionFragment;
    "peek()": FunctionFragment;
    "peep()": FunctionFragment;
    "poke()": FunctionFragment;
    "read()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "src()": FunctionFragment;
    "start()": FunctionFragment;
    "step(uint16)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "void()": FunctionFragment;
    "wards(address)": FunctionFragment;
    "zzz()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bud", values: [string]): string;
  encodeFunctionData(functionFragment: "change", values: [string]): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "diss", values: [string[]]): string;
  encodeFunctionData(functionFragment: "hop", values?: undefined): string;
  encodeFunctionData(functionFragment: "kiss", values: [string[]]): string;
  encodeFunctionData(functionFragment: "pass", values?: undefined): string;
  encodeFunctionData(functionFragment: "peek", values?: undefined): string;
  encodeFunctionData(functionFragment: "peep", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(functionFragment: "read", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "src", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "step", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "void", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(functionFragment: "zzz", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bud", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "change", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kiss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "src", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "void", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zzz", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,bytes)": EventFragment;
    "LogValue(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogValue"): EventFragment;
}

export class McdOsm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: McdOsmInterface;

  functions: {
    bud(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "bud(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    change(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "change(address)"(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "diss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "diss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hop(overrides?: CallOverrides): Promise<[number]>;

    "hop()"(overrides?: CallOverrides): Promise<[number]>;

    "kiss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "kiss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pass(overrides?: CallOverrides): Promise<[boolean] & { ok: boolean }>;

    "pass()"(overrides?: CallOverrides): Promise<[boolean] & { ok: boolean }>;

    peek(overrides?: CallOverrides): Promise<[string, boolean]>;

    "peek()"(overrides?: CallOverrides): Promise<[string, boolean]>;

    peep(overrides?: CallOverrides): Promise<[string, boolean]>;

    "peep()"(overrides?: CallOverrides): Promise<[string, boolean]>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "poke()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    read(overrides?: CallOverrides): Promise<[string]>;

    "read()"(overrides?: CallOverrides): Promise<[string]>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    src(overrides?: CallOverrides): Promise<[string]>;

    "src()"(overrides?: CallOverrides): Promise<[string]>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "step(uint16)"(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stopped()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    void(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "void()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zzz(overrides?: CallOverrides): Promise<[BigNumber]>;

    "zzz()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bud(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "bud(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  change(
    src_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "change(address)"(
    src_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deny(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "diss(address[])"(
    a: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "diss(address)"(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hop(overrides?: CallOverrides): Promise<number>;

  "hop()"(overrides?: CallOverrides): Promise<number>;

  "kiss(address[])"(
    a: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "kiss(address)"(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pass(overrides?: CallOverrides): Promise<boolean>;

  "pass()"(overrides?: CallOverrides): Promise<boolean>;

  peek(overrides?: CallOverrides): Promise<[string, boolean]>;

  "peek()"(overrides?: CallOverrides): Promise<[string, boolean]>;

  peep(overrides?: CallOverrides): Promise<[string, boolean]>;

  "peep()"(overrides?: CallOverrides): Promise<[string, boolean]>;

  poke(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "poke()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  read(overrides?: CallOverrides): Promise<string>;

  "read()"(overrides?: CallOverrides): Promise<string>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rely(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  src(overrides?: CallOverrides): Promise<string>;

  "src()"(overrides?: CallOverrides): Promise<string>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "start()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step(
    ts: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "step(uint16)"(
    ts: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<BigNumber>;

  "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

  void(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "void()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  zzz(overrides?: CallOverrides): Promise<BigNumber>;

  "zzz()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bud(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "bud(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    change(src_: string, overrides?: CallOverrides): Promise<void>;

    "change(address)"(src_: string, overrides?: CallOverrides): Promise<void>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    "diss(address[])"(a: string[], overrides?: CallOverrides): Promise<void>;

    "diss(address)"(a: string, overrides?: CallOverrides): Promise<void>;

    hop(overrides?: CallOverrides): Promise<number>;

    "hop()"(overrides?: CallOverrides): Promise<number>;

    "kiss(address[])"(a: string[], overrides?: CallOverrides): Promise<void>;

    "kiss(address)"(a: string, overrides?: CallOverrides): Promise<void>;

    pass(overrides?: CallOverrides): Promise<boolean>;

    "pass()"(overrides?: CallOverrides): Promise<boolean>;

    peek(overrides?: CallOverrides): Promise<[string, boolean]>;

    "peek()"(overrides?: CallOverrides): Promise<[string, boolean]>;

    peep(overrides?: CallOverrides): Promise<[string, boolean]>;

    "peep()"(overrides?: CallOverrides): Promise<[string, boolean]>;

    poke(overrides?: CallOverrides): Promise<void>;

    "poke()"(overrides?: CallOverrides): Promise<void>;

    read(overrides?: CallOverrides): Promise<string>;

    "read()"(overrides?: CallOverrides): Promise<string>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    src(overrides?: CallOverrides): Promise<string>;

    "src()"(overrides?: CallOverrides): Promise<string>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    step(ts: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "step(uint16)"(ts: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    void(overrides?: CallOverrides): Promise<void>;

    "void()"(overrides?: CallOverrides): Promise<void>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zzz(overrides?: CallOverrides): Promise<BigNumber>;

    "zzz()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    LogNote(
      sig: BytesLike | null,
      usr: string | null,
      arg1: BytesLike | null,
      arg2: BytesLike | null,
      data: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { sig: string; usr: string; arg1: string; arg2: string; data: string }
    >;

    LogValue(val: null): TypedEventFilter<[string], { val: string }>;
  };

  estimateGas: {
    bud(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "bud(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    change(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "change(address)"(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "diss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "diss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hop(overrides?: CallOverrides): Promise<BigNumber>;

    "hop()"(overrides?: CallOverrides): Promise<BigNumber>;

    "kiss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "kiss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pass(overrides?: CallOverrides): Promise<BigNumber>;

    "pass()"(overrides?: CallOverrides): Promise<BigNumber>;

    peek(overrides?: CallOverrides): Promise<BigNumber>;

    "peek()"(overrides?: CallOverrides): Promise<BigNumber>;

    peep(overrides?: CallOverrides): Promise<BigNumber>;

    "peep()"(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "poke()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    read(overrides?: CallOverrides): Promise<BigNumber>;

    "read()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    src(overrides?: CallOverrides): Promise<BigNumber>;

    "src()"(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "step(uint16)"(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    void(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "void()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zzz(overrides?: CallOverrides): Promise<BigNumber>;

    "zzz()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bud(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bud(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    change(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "change(address)"(
      src_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "diss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "diss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hop()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kiss(address[])"(
      a: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "kiss(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pass()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "peek()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "peep()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "poke()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    read(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "read()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    src(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "src()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "step(uint16)"(
      ts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    void(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "void()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zzz(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zzz()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
