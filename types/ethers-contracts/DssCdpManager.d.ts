/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DssCdpManagerInterface extends ethers.utils.Interface {
  functions: {
    "cdpAllow(uint256,address,uint256)": FunctionFragment;
    "cdpCan(address,uint256,address)": FunctionFragment;
    "cdpi()": FunctionFragment;
    "count(address)": FunctionFragment;
    "enter(address,uint256)": FunctionFragment;
    "first(address)": FunctionFragment;
    "flux(bytes32,uint256,address,uint256)": FunctionFragment;
    "frob(uint256,int256,int256)": FunctionFragment;
    "give(uint256,address)": FunctionFragment;
    "ilks(uint256)": FunctionFragment;
    "last(address)": FunctionFragment;
    "list(uint256)": FunctionFragment;
    "move(uint256,address,uint256)": FunctionFragment;
    "open(bytes32,address)": FunctionFragment;
    "owns(uint256)": FunctionFragment;
    "quit(uint256,address)": FunctionFragment;
    "shift(uint256,uint256)": FunctionFragment;
    "urnAllow(address,uint256)": FunctionFragment;
    "urnCan(address,address)": FunctionFragment;
    "urns(uint256)": FunctionFragment;
    "vat()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cdpAllow",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cdpCan",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "cdpi", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values: [string]): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "first", values: [string]): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BytesLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "last", values: [string]): string;
  encodeFunctionData(functionFragment: "list", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owns", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shift",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urnAllow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urnCan",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "urns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cdpAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdpCan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdpi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "first", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "last", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urnAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urnCan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,bytes)": EventFragment;
    "NewCdp(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCdp"): EventFragment;
}

export class DssCdpManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DssCdpManagerInterface;

  functions: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cdpAllow(uint256,address,uint256)"(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cdpCan(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cdpi(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cdpi()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    count(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "count(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enter(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enter(address,uint256)"(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    first(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "first(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "flux(bytes32,uint256,address,uint256)"(
      ilk: BytesLike,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flux(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "frob(uint256,int256,int256)"(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    give(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "give(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "ilks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    last(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "last(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    "list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "move(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "open(bytes32,address)"(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "owns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quit(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "quit(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shift(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "shift(uint256,uint256)"(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    urnAllow(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "urnAllow(address,uint256)"(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    urnCan(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "urnCan(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "urns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cdpAllow(
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cdpAllow(uint256,address,uint256)"(
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cdpCan(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cdpCan(address,uint256,address)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cdpi(overrides?: CallOverrides): Promise<BigNumber>;

  "cdpi()"(overrides?: CallOverrides): Promise<BigNumber>;

  count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "count(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  enter(
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enter(address,uint256)"(
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  first(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "first(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "flux(bytes32,uint256,address,uint256)"(
    ilk: BytesLike,
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flux(uint256,address,uint256)"(
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frob(
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "frob(uint256,int256,int256)"(
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  give(
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "give(uint256,address)"(
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ilks(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "last(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  list(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

  "list(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

  move(
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "move(uint256,address,uint256)"(
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "open(bytes32,address)"(
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "owns(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  quit(
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "quit(uint256,address)"(
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shift(
    cdpSrc: BigNumberish,
    cdpDst: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "shift(uint256,uint256)"(
    cdpSrc: BigNumberish,
    cdpDst: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  urnAllow(
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "urnAllow(address,uint256)"(
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  urnCan(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "urnCan(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "urns(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cdpAllow(uint256,address,uint256)"(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cdpCan(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cdpi(overrides?: CallOverrides): Promise<BigNumber>;

    "cdpi()"(overrides?: CallOverrides): Promise<BigNumber>;

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "count(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enter(
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enter(address,uint256)"(
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    first(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "first(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flux(bytes32,uint256,address,uint256)"(
      ilk: BytesLike,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flux(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "frob(uint256,int256,int256)"(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "give(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ilks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "last(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    "list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "move(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "open(bytes32,address)"(
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "owns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    quit(
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "quit(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shift(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "shift(uint256,uint256)"(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    urnAllow(
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "urnAllow(address,uint256)"(
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    urnCan(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "urnCan(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "urns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LogNote(
      sig: BytesLike | null,
      usr: string | null,
      arg1: BytesLike | null,
      arg2: BytesLike | null,
      data: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { sig: string; usr: string; arg1: string; arg2: string; data: string }
    >;

    NewCdp(
      usr: string | null,
      own: string | null,
      cdp: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { usr: string; own: string; cdp: BigNumber }
    >;
  };

  estimateGas: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cdpAllow(uint256,address,uint256)"(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cdpCan(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cdpi(overrides?: CallOverrides): Promise<BigNumber>;

    "cdpi()"(overrides?: CallOverrides): Promise<BigNumber>;

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "count(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enter(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enter(address,uint256)"(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    first(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "first(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flux(bytes32,uint256,address,uint256)"(
      ilk: BytesLike,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flux(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "frob(uint256,int256,int256)"(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    give(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "give(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ilks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "last(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "move(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "open(bytes32,address)"(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "owns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quit(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "quit(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shift(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "shift(uint256,uint256)"(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    urnAllow(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "urnAllow(address,uint256)"(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    urnCan(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "urnCan(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "urns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cdpAllow(uint256,address,uint256)"(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cdpCan(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cdpi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cdpi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "count(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enter(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enter(address,uint256)"(
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    first(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "first(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flux(bytes32,uint256,address,uint256)"(
      ilk: BytesLike,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flux(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "frob(uint256,int256,int256)"(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    give(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "give(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ilks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "last(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "move(uint256,address,uint256)"(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "open(bytes32,address)"(
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quit(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "quit(uint256,address)"(
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shift(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "shift(uint256,uint256)"(
      cdpSrc: BigNumberish,
      cdpDst: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    urnAllow(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "urnAllow(address,uint256)"(
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    urnCan(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "urnCan(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    urns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "urns(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
