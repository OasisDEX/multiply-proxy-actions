/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface McdEndInterface extends ethers.utils.Interface {
  functions: {
    "Art(bytes32)": FunctionFragment;
    "bag(address)": FunctionFragment;
    "cage()": FunctionFragment;
    "cash(bytes32,uint256)": FunctionFragment;
    "cat()": FunctionFragment;
    "debt()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "fix(bytes32)": FunctionFragment;
    "flow(bytes32)": FunctionFragment;
    "free(bytes32)": FunctionFragment;
    "gap(bytes32)": FunctionFragment;
    "live()": FunctionFragment;
    "out(bytes32,address)": FunctionFragment;
    "pack(uint256)": FunctionFragment;
    "pot()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "skim(bytes32,address)": FunctionFragment;
    "skip(bytes32,uint256)": FunctionFragment;
    "spot()": FunctionFragment;
    "tag(bytes32)": FunctionFragment;
    "thaw()": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wait()": FunctionFragment;
    "wards(address)": FunctionFragment;
    "when()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Art", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "bag", values: [string]): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cat", values?: undefined): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fix", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "flow", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "free", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "gap", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "out",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "pack", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "skim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "skip",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "spot", values?: undefined): string;
  encodeFunctionData(functionFragment: "tag", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "thaw", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wait", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(functionFragment: "when", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Art", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "out", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "thaw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "when", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export class McdEnd extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: McdEndInterface;

  functions: {
    Art(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "Art(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bag(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "bag(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cage(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cash(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cash(bytes32,uint256)"(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cat(overrides?: CallOverrides): Promise<[string]>;

    "cat()"(overrides?: CallOverrides): Promise<[string]>;

    debt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deny(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fix(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flow(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flow(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    free(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "free(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gap(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "gap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    "live()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    out(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "out(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pack(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pack(uint256)"(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pot(overrides?: CallOverrides): Promise<[string]>;

    "pot()"(overrides?: CallOverrides): Promise<[string]>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rely(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skim(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "skim(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skip(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "skip(bytes32,uint256)"(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spot(overrides?: CallOverrides): Promise<[string]>;

    "spot()"(overrides?: CallOverrides): Promise<[string]>;

    tag(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "tag(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    thaw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "thaw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    "vow()"(overrides?: CallOverrides): Promise<[string]>;

    wait(overrides?: CallOverrides): Promise<[BigNumber]>;

    "wait()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    when(overrides?: CallOverrides): Promise<[BigNumber]>;

    "when()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Art(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "Art(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bag(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "bag(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "cage()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cage(bytes32)"(
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cash(
    ilk: BytesLike,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cash(bytes32,uint256)"(
    ilk: BytesLike,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cat(overrides?: CallOverrides): Promise<string>;

  "cat()"(overrides?: CallOverrides): Promise<string>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  deny(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deny(address)"(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "fix(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flow(
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flow(bytes32)"(
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  free(
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "free(bytes32)"(
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "gap(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  "live()"(overrides?: CallOverrides): Promise<BigNumber>;

  out(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "out(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pack(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pack(uint256)"(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pot(overrides?: CallOverrides): Promise<string>;

  "pot()"(overrides?: CallOverrides): Promise<string>;

  rely(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rely(address)"(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skim(
    ilk: BytesLike,
    urn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "skim(bytes32,address)"(
    ilk: BytesLike,
    urn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skip(
    ilk: BytesLike,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "skip(bytes32,uint256)"(
    ilk: BytesLike,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spot(overrides?: CallOverrides): Promise<string>;

  "spot()"(overrides?: CallOverrides): Promise<string>;

  tag(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "tag(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  thaw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "thaw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  "vow()"(overrides?: CallOverrides): Promise<string>;

  wait(overrides?: CallOverrides): Promise<BigNumber>;

  "wait()"(overrides?: CallOverrides): Promise<BigNumber>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  when(overrides?: CallOverrides): Promise<BigNumber>;

  "when()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Art(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "Art(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bag(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "bag(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cage()"(overrides?: CallOverrides): Promise<void>;

    "cage(bytes32)"(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    cash(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cash(bytes32,uint256)"(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cat(overrides?: CallOverrides): Promise<string>;

    "cat()"(overrides?: CallOverrides): Promise<string>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    deny(guy: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(guy: string, overrides?: CallOverrides): Promise<void>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flow(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    "flow(bytes32)"(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    free(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    "free(bytes32)"(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    gap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "gap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    out(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "out(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pack(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "pack(uint256)"(
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pot(overrides?: CallOverrides): Promise<string>;

    "pot()"(overrides?: CallOverrides): Promise<string>;

    rely(guy: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(guy: string, overrides?: CallOverrides): Promise<void>;

    skim(ilk: BytesLike, urn: string, overrides?: CallOverrides): Promise<void>;

    "skim(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    skip(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "skip(bytes32,uint256)"(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spot(overrides?: CallOverrides): Promise<string>;

    "spot()"(overrides?: CallOverrides): Promise<string>;

    tag(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "tag(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thaw(overrides?: CallOverrides): Promise<void>;

    "thaw()"(overrides?: CallOverrides): Promise<void>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    "vow()"(overrides?: CallOverrides): Promise<string>;

    wait(overrides?: CallOverrides): Promise<BigNumber>;

    "wait()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    when(overrides?: CallOverrides): Promise<BigNumber>;

    "when()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    LogNote(
      sig: BytesLike | null,
      usr: string | null,
      arg1: BytesLike | null,
      arg2: BytesLike | null,
      data: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { sig: string; usr: string; arg1: string; arg2: string; data: string }
    >;
  };

  estimateGas: {
    Art(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "Art(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bag(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "bag(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cage(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cash(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cash(bytes32,uint256)"(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cat(overrides?: CallOverrides): Promise<BigNumber>;

    "cat()"(overrides?: CallOverrides): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deny(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flow(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flow(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    free(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "free(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "gap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    out(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "out(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pack(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pack(uint256)"(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    "pot()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rely(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skim(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "skim(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skip(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "skip(bytes32,uint256)"(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spot(overrides?: CallOverrides): Promise<BigNumber>;

    "spot()"(overrides?: CallOverrides): Promise<BigNumber>;

    tag(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "tag(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thaw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "thaw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    "vow()"(overrides?: CallOverrides): Promise<BigNumber>;

    wait(overrides?: CallOverrides): Promise<BigNumber>;

    "wait()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    when(overrides?: CallOverrides): Promise<BigNumber>;

    "when()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Art(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Art(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bag(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bag(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cage(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cash(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cash(bytes32,uint256)"(
      ilk: BytesLike,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deny(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fix(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flow(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flow(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    free(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "free(bytes32)"(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "live()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    out(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "out(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pack(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pack(uint256)"(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rely(address)"(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skim(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "skim(bytes32,address)"(
      ilk: BytesLike,
      urn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skip(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "skip(bytes32,uint256)"(
      ilk: BytesLike,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tag(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tag(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thaw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "thaw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wait()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    when(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "when()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
