/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DssProxyActionsInterface extends ethers.utils.Interface {
  functions: {
    "cdpAllow(address,uint256,address,uint256)": FunctionFragment;
    "daiJoin_join(address,address,uint256)": FunctionFragment;
    "draw(address,address,address,uint256,uint256)": FunctionFragment;
    "enter(address,address,uint256)": FunctionFragment;
    "ethJoin_join(address,address)": FunctionFragment;
    "exitETH(address,address,uint256,uint256)": FunctionFragment;
    "exitGem(address,address,uint256,uint256)": FunctionFragment;
    "flux(address,uint256,address,uint256)": FunctionFragment;
    "freeETH(address,address,uint256,uint256)": FunctionFragment;
    "freeGem(address,address,uint256,uint256)": FunctionFragment;
    "frob(address,uint256,int256,int256)": FunctionFragment;
    "gemJoin_join(address,address,uint256,bool)": FunctionFragment;
    "give(address,uint256,address)": FunctionFragment;
    "giveToProxy(address,address,uint256,address)": FunctionFragment;
    "hope(address,address)": FunctionFragment;
    "lockETH(address,address,uint256)": FunctionFragment;
    "lockETHAndDraw(address,address,address,address,uint256,uint256)": FunctionFragment;
    "lockGem(address,address,uint256,uint256,bool)": FunctionFragment;
    "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "makeGemBag(address)": FunctionFragment;
    "move(address,uint256,address,uint256)": FunctionFragment;
    "nope(address,address)": FunctionFragment;
    "open(address,bytes32,address)": FunctionFragment;
    "openLockETHAndDraw(address,address,address,address,bytes32,uint256)": FunctionFragment;
    "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)": FunctionFragment;
    "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)": FunctionFragment;
    "quit(address,uint256,address)": FunctionFragment;
    "safeLockETH(address,address,uint256,address)": FunctionFragment;
    "safeLockGem(address,address,uint256,uint256,bool,address)": FunctionFragment;
    "safeWipe(address,address,uint256,uint256,address)": FunctionFragment;
    "safeWipeAll(address,address,uint256,address)": FunctionFragment;
    "shift(address,uint256,uint256)": FunctionFragment;
    "transfer(address,address,uint256)": FunctionFragment;
    "urnAllow(address,address,uint256)": FunctionFragment;
    "wipe(address,address,uint256,uint256)": FunctionFragment;
    "wipeAll(address,address,uint256)": FunctionFragment;
    "wipeAllAndFreeETH(address,address,address,uint256,uint256)": FunctionFragment;
    "wipeAllAndFreeGem(address,address,address,uint256,uint256)": FunctionFragment;
    "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cdpAllow",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daiJoin_join",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethJoin_join",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitETH",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitGem",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeETH",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeGem",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gemJoin_join",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "giveToProxy",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hope",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockETHAndDraw",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockGem",
    values: [string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lockGemAndDraw",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "makeGemBag", values: [string]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nope",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockETHAndDraw",
    values: [string, string, string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockGNTAndDraw",
    values: [
      string,
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockGemAndDraw",
    values: [
      string,
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockETH",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockGem",
    values: [string, string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeWipe",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeWipeAll",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shift",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urnAllow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipe",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAll",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAllAndFreeETH",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAllAndFreeGem",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAndFreeETH",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAndFreeGem",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cdpAllow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daiJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gemJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "giveToProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockETHAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockGem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockGemAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeGemBag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLockETHAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockGNTAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockGemAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeLockETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLockGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeWipe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeWipeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urnAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wipeAllAndFreeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wipeAllAndFreeGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wipeAndFreeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wipeAndFreeGem",
    data: BytesLike
  ): Result;

  events: {};
}

export class DssProxyActions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DssProxyActionsInterface;

  functions: {
    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    draw(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "draw(address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freeETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freeGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gemJoin_join(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockETH(address,address,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockETHAndDraw(address,address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockGem(address,address,uint256,uint256,bool)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeGemBag(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makeGemBag(address)"(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openLockETHAndDraw(address,address,address,address,bytes32,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLockGNTAndDraw(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)"(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeLockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeLockETH(address,address,uint256,address)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeLockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeLockGem(address,address,uint256,uint256,bool,address)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeWipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeWipe(address,address,uint256,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeWipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeWipeAll(address,address,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipe(address,address,uint256,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipeAll(address,address,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAllAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipeAllAndFreeETH(address,address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAllAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipeAllAndFreeGem(address,address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wipeAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cdpAllow(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cdpAllow(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daiJoin_join(
    apt: string,
    urn: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "daiJoin_join(address,address,uint256)"(
    apt: string,
    urn: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  draw(
    manager: string,
    jug: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "draw(address,address,address,uint256,uint256)"(
    manager: string,
    jug: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enter(
    manager: string,
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enter(address,address,uint256)"(
    manager: string,
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethJoin_join(
    apt: string,
    urn: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ethJoin_join(address,address)"(
    apt: string,
    urn: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitETH(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitETH(address,address,uint256,uint256)"(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitGem(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitGem(address,address,uint256,uint256)"(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flux(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flux(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeETH(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freeETH(address,address,uint256,uint256)"(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeGem(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freeGem(address,address,uint256,uint256)"(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frob(
    manager: string,
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "frob(address,uint256,int256,int256)"(
    manager: string,
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gemJoin_join(
    apt: string,
    urn: string,
    amt: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "gemJoin_join(address,address,uint256,bool)"(
    apt: string,
    urn: string,
    amt: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  give(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "give(address,uint256,address)"(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  giveToProxy(
    proxyRegistry: string,
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "giveToProxy(address,address,uint256,address)"(
    proxyRegistry: string,
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hope(
    obj: string,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hope(address,address)"(
    obj: string,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockETH(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockETH(address,address,uint256)"(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockETHAndDraw(
    manager: string,
    jug: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockETHAndDraw(address,address,address,address,uint256,uint256)"(
    manager: string,
    jug: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockGem(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockGem(address,address,uint256,uint256,bool)"(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockGemAndDraw(
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    wadD: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)"(
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    wadD: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeGemBag(
    gemJoin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makeGemBag(address)"(
    gemJoin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  move(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "move(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nope(
    obj: string,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nope(address,address)"(
    obj: string,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    manager: string,
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "open(address,bytes32,address)"(
    manager: string,
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLockETHAndDraw(
    manager: string,
    jug: string,
    ethJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openLockETHAndDraw(address,address,address,address,bytes32,uint256)"(
    manager: string,
    jug: string,
    ethJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    wadD: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLockGNTAndDraw(
    manager: string,
    jug: string,
    gntJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    amtC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)"(
    manager: string,
    jug: string,
    gntJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    amtC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLockGemAndDraw(
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    amtC: BigNumberish,
    wadD: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)"(
    manager: string,
    jug: string,
    gemJoin: string,
    daiJoin: string,
    ilk: BytesLike,
    amtC: BigNumberish,
    wadD: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quit(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "quit(address,uint256,address)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeLockETH(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    owner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeLockETH(address,address,uint256,address)"(
    manager: string,
    ethJoin: string,
    cdp: BigNumberish,
    owner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeLockGem(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    transferFrom: boolean,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeLockGem(address,address,uint256,uint256,bool,address)"(
    manager: string,
    gemJoin: string,
    cdp: BigNumberish,
    amt: BigNumberish,
    transferFrom: boolean,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeWipe(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeWipe(address,address,uint256,uint256,address)"(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeWipeAll(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeWipeAll(address,address,uint256,address)"(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shift(
    manager: string,
    cdpSrc: BigNumberish,
    cdpOrg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "shift(address,uint256,uint256)"(
    manager: string,
    cdpSrc: BigNumberish,
    cdpOrg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    gem: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,address,uint256)"(
    gem: string,
    dst: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  urnAllow(
    manager: string,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "urnAllow(address,address,uint256)"(
    manager: string,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipe(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipe(address,address,uint256,uint256)"(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAll(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipeAll(address,address,uint256)"(
    manager: string,
    daiJoin: string,
    cdp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAllAndFreeETH(
    manager: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadC: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipeAllAndFreeETH(address,address,address,uint256,uint256)"(
    manager: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadC: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAllAndFreeGem(
    manager: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipeAllAndFreeGem(address,address,address,uint256,uint256)"(
    manager: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAndFreeETH(
    manager: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)"(
    manager: string,
    ethJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    wadC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wipeAndFreeGem(
    manager: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)"(
    manager: string,
    gemJoin: string,
    daiJoin: string,
    cdp: BigNumberish,
    amtC: BigNumberish,
    wadD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    draw(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "draw(address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exitETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "freeETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "freeGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gemJoin_join(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hope(obj: string, usr: string, overrides?: CallOverrides): Promise<void>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockETH(address,address,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockETHAndDraw(address,address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockGem(address,address,uint256,uint256,bool)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    lockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    makeGemBag(gemJoin: string, overrides?: CallOverrides): Promise<string>;

    "makeGemBag(address)"(
      gemJoin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nope(obj: string, usr: string, overrides?: CallOverrides): Promise<void>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openLockETHAndDraw(address,address,address,address,bytes32,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLockGNTAndDraw(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bag: string; cdp: BigNumber }>;

    "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)"(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bag: string; cdp: BigNumber }>;

    openLockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeLockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeLockETH(address,address,uint256,address)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeLockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeLockGem(address,address,uint256,uint256,bool,address)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeWipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeWipe(address,address,uint256,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeWipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeWipeAll(address,address,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipe(address,address,uint256,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipeAll(address,address,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAllAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipeAllAndFreeETH(address,address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAllAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipeAllAndFreeGem(address,address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    draw(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "draw(address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freeETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freeGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gemJoin_join(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockETH(address,address,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockETHAndDraw(address,address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockGem(address,address,uint256,uint256,bool)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeGemBag(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makeGemBag(address)"(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openLockETHAndDraw(address,address,address,address,bytes32,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLockGNTAndDraw(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)"(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeLockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeLockETH(address,address,uint256,address)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeLockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeLockGem(address,address,uint256,uint256,bool,address)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeWipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeWipe(address,address,uint256,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeWipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeWipeAll(address,address,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipe(address,address,uint256,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipeAll(address,address,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAllAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipeAllAndFreeETH(address,address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAllAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipeAllAndFreeGem(address,address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wipeAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    draw(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "draw(address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freeETH(address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freeGem(address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gemJoin_join(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockETH(address,address,uint256)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockETHAndDraw(address,address,address,address,uint256,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockGem(address,address,uint256,uint256,bool)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockGemAndDraw(address,address,address,address,uint256,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeGemBag(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makeGemBag(address)"(
      gemJoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nope(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLockETHAndDraw(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openLockETHAndDraw(address,address,address,address,bytes32,uint256)"(
      manager: string,
      jug: string,
      ethJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      wadD: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLockGNTAndDraw(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openLockGNTAndDraw(address,address,address,address,bytes32,uint256,uint256)"(
      manager: string,
      jug: string,
      gntJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLockGemAndDraw(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)"(
      manager: string,
      jug: string,
      gemJoin: string,
      daiJoin: string,
      ilk: BytesLike,
      amtC: BigNumberish,
      wadD: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeLockETH(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeLockETH(address,address,uint256,address)"(
      manager: string,
      ethJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeLockGem(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeLockGem(address,address,uint256,uint256,bool,address)"(
      manager: string,
      gemJoin: string,
      cdp: BigNumberish,
      amt: BigNumberish,
      transferFrom: boolean,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeWipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeWipe(address,address,uint256,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeWipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeWipeAll(address,address,uint256,address)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipe(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipe(address,address,uint256,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAll(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipeAll(address,address,uint256)"(
      manager: string,
      daiJoin: string,
      cdp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAllAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipeAllAndFreeETH(address,address,address,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAllAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipeAllAndFreeGem(address,address,address,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAndFreeETH(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipeAndFreeETH(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      ethJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      wadC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wipeAndFreeGem(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wipeAndFreeGem(address,address,address,uint256,uint256,uint256)"(
      manager: string,
      gemJoin: string,
      daiJoin: string,
      cdp: BigNumberish,
      amtC: BigNumberish,
      wadD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
