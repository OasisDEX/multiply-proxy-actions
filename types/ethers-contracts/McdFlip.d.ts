/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface McdFlipInterface extends ethers.utils.Interface {
  functions: {
    "beg()": FunctionFragment;
    "bids(uint256)": FunctionFragment;
    "cat()": FunctionFragment;
    "deal(uint256)": FunctionFragment;
    "dent(uint256,uint256,uint256)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "ilk()": FunctionFragment;
    "kick(address,address,uint256,uint256,uint256)": FunctionFragment;
    "kicks()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "tau()": FunctionFragment;
    "tend(uint256,uint256,uint256)": FunctionFragment;
    "tick(uint256)": FunctionFragment;
    "ttl()": FunctionFragment;
    "vat()": FunctionFragment;
    "wards(address)": FunctionFragment;
    "yank(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "beg", values?: undefined): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "cat", values?: undefined): string;
  encodeFunctionData(functionFragment: "deal", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ilk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kicks", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "tau", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tend",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tick", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ttl", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(functionFragment: "yank", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "beg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tau", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yank", data: BytesLike): Result;

  events: {
    "Kick(uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "LogNote(bytes4,address,bytes32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export class McdFlip extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: McdFlipInterface;

  functions: {
    beg(overrides?: CallOverrides): Promise<[BigNumber]>;

    "beg()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        string,
        BigNumber
      ] & {
        bid: BigNumber;
        lot: BigNumber;
        guy: string;
        tic: number;
        end: number;
        usr: string;
        gal: string;
        tab: BigNumber;
      }
    >;

    "bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        string,
        BigNumber
      ] & {
        bid: BigNumber;
        lot: BigNumber;
        guy: string;
        tic: number;
        end: number;
        usr: string;
        gal: string;
        tab: BigNumber;
      }
    >;

    cat(overrides?: CallOverrides): Promise<[string]>;

    "cat()"(overrides?: CallOverrides): Promise<[string]>;

    deal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deal(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dent(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dent(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilk(overrides?: CallOverrides): Promise<[string]>;

    "ilk()"(overrides?: CallOverrides): Promise<[string]>;

    kick(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "kick(address,address,uint256,uint256,uint256)"(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kicks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "kicks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tau(overrides?: CallOverrides): Promise<[number]>;

    "tau()"(overrides?: CallOverrides): Promise<[number]>;

    tend(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tend(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tick(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tick(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ttl(overrides?: CallOverrides): Promise<[number]>;

    "ttl()"(overrides?: CallOverrides): Promise<[number]>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "yank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  beg(overrides?: CallOverrides): Promise<BigNumber>;

  "beg()"(overrides?: CallOverrides): Promise<BigNumber>;

  bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      string,
      string,
      BigNumber
    ] & {
      bid: BigNumber;
      lot: BigNumber;
      guy: string;
      tic: number;
      end: number;
      usr: string;
      gal: string;
      tab: BigNumber;
    }
  >;

  "bids(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      string,
      string,
      BigNumber
    ] & {
      bid: BigNumber;
      lot: BigNumber;
      guy: string;
      tic: number;
      end: number;
      usr: string;
      gal: string;
      tab: BigNumber;
    }
  >;

  cat(overrides?: CallOverrides): Promise<string>;

  "cat()"(overrides?: CallOverrides): Promise<string>;

  deal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deal(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dent(
    id: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dent(uint256,uint256,uint256)"(
    id: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deny(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilk(overrides?: CallOverrides): Promise<string>;

  "ilk()"(overrides?: CallOverrides): Promise<string>;

  kick(
    usr: string,
    gal: string,
    tab: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "kick(address,address,uint256,uint256,uint256)"(
    usr: string,
    gal: string,
    tab: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kicks(overrides?: CallOverrides): Promise<BigNumber>;

  "kicks()"(overrides?: CallOverrides): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rely(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tau(overrides?: CallOverrides): Promise<number>;

  "tau()"(overrides?: CallOverrides): Promise<number>;

  tend(
    id: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tend(uint256,uint256,uint256)"(
    id: BigNumberish,
    lot: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tick(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tick(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ttl(overrides?: CallOverrides): Promise<number>;

  "ttl()"(overrides?: CallOverrides): Promise<number>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  yank(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "yank(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beg(overrides?: CallOverrides): Promise<BigNumber>;

    "beg()"(overrides?: CallOverrides): Promise<BigNumber>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        string,
        BigNumber
      ] & {
        bid: BigNumber;
        lot: BigNumber;
        guy: string;
        tic: number;
        end: number;
        usr: string;
        gal: string;
        tab: BigNumber;
      }
    >;

    "bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        string,
        BigNumber
      ] & {
        bid: BigNumber;
        lot: BigNumber;
        guy: string;
        tic: number;
        end: number;
        usr: string;
        gal: string;
        tab: BigNumber;
      }
    >;

    cat(overrides?: CallOverrides): Promise<string>;

    "cat()"(overrides?: CallOverrides): Promise<string>;

    deal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deal(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    dent(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dent(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilk(overrides?: CallOverrides): Promise<string>;

    "ilk()"(overrides?: CallOverrides): Promise<string>;

    kick(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "kick(address,address,uint256,uint256,uint256)"(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kicks(overrides?: CallOverrides): Promise<BigNumber>;

    "kicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    tau(overrides?: CallOverrides): Promise<number>;

    "tau()"(overrides?: CallOverrides): Promise<number>;

    tend(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "tend(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tick(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "tick(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    ttl(overrides?: CallOverrides): Promise<number>;

    "ttl()"(overrides?: CallOverrides): Promise<number>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yank(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "yank(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Kick(
      id: null,
      lot: null,
      bid: null,
      tab: null,
      usr: string | null,
      gal: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        id: BigNumber;
        lot: BigNumber;
        bid: BigNumber;
        tab: BigNumber;
        usr: string;
        gal: string;
      }
    >;

    LogNote(
      sig: BytesLike | null,
      usr: string | null,
      arg1: BytesLike | null,
      arg2: BytesLike | null,
      data: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { sig: string; usr: string; arg1: string; arg2: string; data: string }
    >;
  };

  estimateGas: {
    beg(overrides?: CallOverrides): Promise<BigNumber>;

    "beg()"(overrides?: CallOverrides): Promise<BigNumber>;

    bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cat(overrides?: CallOverrides): Promise<BigNumber>;

    "cat()"(overrides?: CallOverrides): Promise<BigNumber>;

    deal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deal(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dent(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dent(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilk(overrides?: CallOverrides): Promise<BigNumber>;

    "ilk()"(overrides?: CallOverrides): Promise<BigNumber>;

    kick(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "kick(address,address,uint256,uint256,uint256)"(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kicks(overrides?: CallOverrides): Promise<BigNumber>;

    "kicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tau(overrides?: CallOverrides): Promise<BigNumber>;

    "tau()"(overrides?: CallOverrides): Promise<BigNumber>;

    tend(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tend(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tick(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tick(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ttl(overrides?: CallOverrides): Promise<BigNumber>;

    "ttl()"(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "yank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beg()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deal(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dent(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dent(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ilk()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kick(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "kick(address,address,uint256,uint256,uint256)"(
      usr: string,
      gal: string,
      tab: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kicks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tau(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tau()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tend(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tend(uint256,uint256,uint256)"(
      id: BigNumberish,
      lot: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tick(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tick(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ttl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ttl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "yank(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
